#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("myapp:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// const io = new Server(server);
// const connectedClients = {};

// io.on("connection", (socket) => {
//   console.log("A client connected: " + socket.id);

//   // 연결된 클라이언트를 저장
//   connectedClients[socket.id] = socket;

//   // 클라이언트가 메시지를 보냈을 때 처리
//   socket.on("message", (message) => {
//     console.log(`Message from ${socket.id}: ${message}`);

//     // 받은 메시지를 모든 클라이언트에게 브로드캐스트
//     Object.keys(connectedClients).forEach((clientId) => {
//       connectedClients[clientId].emit("message", `${socket.id}: ${message}`);
//     });
//   });

//   // 클라이언트가 연결을 종료했을 때 처리
//   socket.on("disconnect", () => {
//     console.log("Client disconnected: " + socket.id);

//     // 연결된 클라이언트 객체에서 삭제
//     delete connectedClients[socket.id];
//   });
// });
